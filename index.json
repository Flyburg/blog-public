[{"content":" ","date":"2025 年 9 月 1 日","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"2025 年 9 月 1 日","externalUrl":null,"permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":"","date":"2025 年 9 月 1 日","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025 年 9 月 1 日","externalUrl":null,"permalink":"/tags/cmake/","section":"Tags","summary":"","title":"CMake","type":"tags"},{"content":"","date":"2025 年 9 月 1 日","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025 年 9 月 1 日","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025 年 9 月 1 日","externalUrl":null,"permalink":"/tags/vcpkg/","section":"Tags","summary":"","title":"Vcpkg","type":"tags"},{"content":"","date":"2025 年 9 月 1 日","externalUrl":null,"permalink":"/tags/vscode/","section":"Tags","summary":"","title":"VSCode","type":"tags"},{"content":"","date":"2025 年 9 月 1 日","externalUrl":null,"permalink":"/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/","section":"Categories","summary":"","title":"技术教程","type":"categories"},{"content":" 前言与基本概念 # 近日在做本科毕设的实验环境搭建，涉及到了基于 vcpkg 进行 C++ 库管理的开发工作。由于程序以 FLTK 为 GUI 框架且遵循 MVVM 架构，需要使用 CMake 进行项目配置。笔者在手持 Mac 与 Windows 双设备的同时，被要求进行 Windows/Linux 双平台的软件开发，为此经过资料收集与实践，最终总结出在 Windows/Linux/Mac 三平台下，如何在 VSCode 中配置 CMake 并使用 vcpkg 的方法，能做到不同平台下的开发体验一致。\n我们的目标是在不同的平台上用近乎相同的方式进行 vcpkg + CMake 项目的配置。在微软官方的 vcpkg 文档中，已经介绍了 vcpkg 的相关概念。简要来说，vcpkg 是微软推出的基于 C++ 语言的跨平台包管理工具，可以看作是 C++ 领域的 npm 或 pip。\nCMake 是适用于 C/C++ 项目的跨平台构建系统，通过 CMakeLists.txt 文件来定义项目的构建过程。vcpkg 与 CMake 的结合使用，可以简化 C++ 项目的依赖管理和构建配置。\n这种项目的一般配置与构建流程是：\n配置好 CMake 与 vcpkg 环境； 在项目的 CMakeLists.txt 文件中指定 vcpkg 的工具链文件； 安装 vcpkg 所涉及的依赖库； 使用 CMake 生成构建文件并编译项目。 上述工具都是跨平台的，至于代码编辑器，我们使用同样跨平台的 Microsoft Visual Studio Code (VSCode)，并安装相关插件以支持 CMake 和 C++ 开发。\n环境配置 # 下文中，默认读者掌握基本的命令行操作和 Git 使用方法。同时，Windows 平台下，使用 Powershell 作为命令行工具。 CMake 环境 # Windows 平台，前往 CMake 官方网站下载最新版本的安装包，安装时注意勾选“Add CMake to the system PATH for all users”选项，以便在命令行中直接使用 cmake 命令。\nLinux 平台，可以使用包管理器安装 CMake。例如，在 Ubuntu 上可以运行以下命令：\nsudo apt-get update sudo apt-get install cmake macOS 平台，可以使用 Homebrew 安装 CMake：\nbrew install cmake 不管哪种平台安装，最后通过命令行输入 cmake --version 都可以查看是否安装成功。\nvcpkg 环境 # 首先在你所知道的一个路径下，克隆 vcpkg 仓库：\ngit clone https://github.com/microsoft/vcpkg.git 然后执行启动脚本，Windows 平台运行：\ncd vcpkg; .\\bootstrap-vcpkg.bat Linux 和 macOS 平台运行：\ncd vcpkg \u0026amp;\u0026amp; ./bootstrap-vcpkg.sh 最后需要将 vcpkg 添加到环境变量，以便在命令行中直接使用 vcpkg 命令。\nWindows 平台可以通过系统设置添加环境变量，Linux 和 macOS 平台可以在 ~/.bashrc 或 ~/.zshrc 文件（根据你实际正在使用的 shell）中添加：\nexport VCPKG_ROOT=/path/to/vcpkg export PATH=$VCPKG_ROOT:$PATH 请注意这里的 /path/to/vcpkg 替换为你实际的 vcpkg 路径。\n最后做到在命令行中输入 vcpkg --version 显示版本号即可。\n项目配置 # 这里以一个 FLTK 界面程序为例，参见仓库中的 Hello 项目。打开项目目录，可以看到：\n. ├── CMakeLists.txt ├── code │ ├── CMakeLists.txt │ └── main.cpp ├── vcpkg-configuration.json └── vcpkg.json 2 directories, 5 files 这里 code 文件夹中的 CMakeLists 已经配置好，我们关心根目录下的 CMakeLists.txt 文件：\ncmake_minimum_required(VERSION 3.10) project(Hello) find_package(FLTK CONFIG REQUIRED) add_subdirectory(code code) 第三句的 fltk 需要改为大写 FLTK，具体原因将在后面解释。 这里的第三句 find_package(FLTK CONFIG REQUIRED) 指定了需要使用 FLTK 库，并且要求 CMake 使用配置模式（CONFIG）来查找该库。配置模式意味着 CMake 会寻找由 vcpkg 提供的配置文件，这些文件通常位于 vcpkg 的安装目录中。\n再查看 vcpkg.json 文件：\n{ \u0026#34;dependencies\u0026#34;: [ \u0026#34;fltk\u0026#34; ] } 这里指定了项目所需的依赖库为 FLTK，vcpkg 会根据这个文件来安装和管理项目的依赖。所以我们应该先 vcpkg install 来进行 FLTK 库的安装，然后再使用 CMake 进行项目的配置和构建。\n但是总是这样做未免繁琐，我们在 VSCode 中使用 CMake 插件来简化流程。\nVSCode 配置 # 先安装好 CMake Tools 插件和 C/C++ 插件。安装好后打开项目时上方会弹出选择工具链的选项，选择你想要用的编译器即可，例如 gcc 或是 MSVC 等等。\n然后在项目根目录下新建 .vscode/settings.json 文件，内容如下：\n{ \u0026#34;cmake.configureSettings\u0026#34;: { \u0026#34;CMAKE_TOOLCHAIN_FILE\u0026#34;: \u0026#34;/path/to/vcpkg/scripts/buildsystems/vcpkg.cmake\u0026#34; // 这里的 /path/to/vcpkg 替换为你实际的 vcpkg 路径 // 对于 Windows 平台，使用符合 Windows 格式的路径 }, \u0026#34;cmake.generator\u0026#34;: \u0026#34;Ninja\u0026#34;, // 对于 macOS 和 Linux 平台，使用 \u0026#34;Unix Makefiles\u0026#34; \u0026#34;cmake.buildDirectory\u0026#34;: \u0026#34;${workspaceFolder}/build\u0026#34; } 这里的 CMAKE_TOOLCHAIN_FILE 指定了 vcpkg 的工具链文件路径，CMake 会使用这个文件来配置项目的构建环境，从而自动识别和链接通过 vcpkg 安装的库。\n修改好后，点击下方状态栏的启动，即可开启配置过程。配置成功后，点击下方状态栏的构建按钮，即可进行项目的编译。\nTips # 对于某些系统，在配置项目的过程中可能出错，这时可以去查看错误报告进行相应的修正。例如笔者在 Linux 平台部署的时候多次遇到错误，经过检查是没有安装 opengl 等工具，apt 安装后再次配置即可成功。 CMakeLists.txt 文件中的包名需要与 vcpkg 中的包名完全一致，笔者在 macOS 平台上使用小写 fltk 时多次报错，改为大写 FLTK 后成功。 ","date":"2025 年 9 月 1 日","externalUrl":null,"permalink":"/posts/vcpkg-cmake/","section":"Posts","summary":"","title":"跨平台部署 CMake 与 vcpkg 进行 C++ 开发","type":"posts"},{"content":"","date":"2025 年 8 月 23 日","externalUrl":null,"permalink":"/tags/css/","section":"Tags","summary":"","title":"CSS","type":"tags"},{"content":"","date":"2025 年 8 月 23 日","externalUrl":null,"permalink":"/tags/html/","section":"Tags","summary":"","title":"HTML","type":"tags"},{"content":"","date":"2025 年 8 月 23 日","externalUrl":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"JavaScript","type":"tags"},{"content":"","date":"2025 年 8 月 23 日","externalUrl":null,"permalink":"/tags/mkdocs/","section":"Tags","summary":"","title":"MkDocs","type":"tags"},{"content":"","date":"2025 年 8 月 23 日","externalUrl":null,"permalink":"/series/mkdocs-+-github-pages-%E7%BD%91%E9%A1%B5%E6%9E%84%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/","section":"Series","summary":"","title":"MkDocs + GitHub Pages 网页构建与部署","type":"series"},{"content":"有了前面的一系列工作，我们的 MkDocs 网站已经可以正常生成和部署了，请读者务必对整套流程熟悉之后再继续阅读本文。\n本文中，笔者将通过几个例子，介绍一些 MkDocs 的高级用法。\n配置评论系统 # 有很多评论系统可以集成到 MkDocs 中，这里选用最常用的 Giscus 作为例子，请读者以官方文档为准。\n首先要安装 Giscus GitHub App 并授权给你的仓库。\n然后，去 Giscus 官网，跟着提示引导一步一步走下来，会获得一段代码，类似这样：\n\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;Fanovian/notebook\u0026#34; data-repo-id=\u0026#34;R_kgDOJ2i3-Q\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;DIC_kwDOJ2i3-c4CXtT_\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 接着在网站根目录创建目录和文件编辑 overrides/comments.html 文件：\n{% if page.meta.comments %} \u0026lt;h2 id=\u0026#34;__comments\u0026#34;\u0026gt;{{ lang.t(\u0026#34;meta.comments\u0026#34;) }}\u0026lt;/h2\u0026gt; \u0026lt;!-- Insert generated snippet here --\u0026gt; \u0026lt;!-- Synchronize Giscus theme with palette --\u0026gt; \u0026lt;script\u0026gt; var giscus = document.querySelector(\u0026#34;script[src*=giscus]\u0026#34;) // Set palette on initial load var palette = __md_get(\u0026#34;__palette\u0026#34;) if (palette \u0026amp;\u0026amp; typeof palette.color === \u0026#34;object\u0026#34;) { var theme = palette.color.scheme === \u0026#34;slate\u0026#34; ? \u0026#34;transparent_dark\u0026#34; : \u0026#34;light\u0026#34; // Instruct Giscus to set theme giscus.setAttribute(\u0026#34;data-theme\u0026#34;, theme) } // Register event handlers after documented loaded document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { var ref = document.querySelector(\u0026#34;[data-md-component=palette]\u0026#34;) ref.addEventListener(\u0026#34;change\u0026#34;, function() { var palette = __md_get(\u0026#34;__palette\u0026#34;) if (palette \u0026amp;\u0026amp; typeof palette.color === \u0026#34;object\u0026#34;) { var theme = palette.color.scheme === \u0026#34;slate\u0026#34; ? \u0026#34;transparent_dark\u0026#34; : \u0026#34;light\u0026#34; // Instruct Giscus to change theme var frame = document.querySelector(\u0026#34;.giscus-frame\u0026#34;) frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \u0026#34;https://giscus.app\u0026#34; ) } }) }) \u0026lt;/script\u0026gt; {% endif %} 第三行的 \u0026lt;!-- Insert generated snippet here --\u0026gt; 处粘贴上面的 Giscus 代码。\n如果你对前端三件套比较了解，也可以对这个文件进行一些修改，比如添加一些样式。\n配置好之后记得在 mkdocs.yml 文件中添加：\ntheme: custom_dir: overrides 来把这个文件引入到主题中。除此之外，许多其他自定义的 html 文件也可以放在这个文件夹中，这里直接在主题中一次引入了。\n然后在你想要添加评论的页面的 Markdown 文件的头部添加：\n--- comments: true --- 即可在这个页面中添加评论系统。\n添加顶部公告 # 在 overrides 文件夹中创建 main.html 文件：\n{% extends \u0026#34;base.html\u0026#34; %} {% block announce %} \u0026lt;!-- Add announcement here, including arbitrary HTML --\u0026gt; {% endblock %} 中间填写 HTML 格式的公告内容。\n然后在 mkdocs.yml 文件中添加：\ntheme: custom_dir: overrides features: - announce.dismiss 最后一行的作用是读者可以关闭公告直至公告内容更新，关掉功能则公告常驻。\n自定义配色和字体 # 这个属于 CSS 的内容了。在 docs 文件夹下创建 stylesheets 文件夹，然后在其中创建 extra.css 文件。\n在 extra.css 文件中写入你的 CSS 代码，比如：\n:root { --md-primary-fg-color: #0287ac; --md-primary-fg-color--light: #0287ac; --md-primary-fg-color--dark: #0287ac; --md-accent-fg-color: #0287ac; /* --md-text-font: \u0026#34;LXGW WenKai Screen\u0026#34;; --md-code-font: \u0026#34;Menlo\u0026#34;, \u0026#34;LXGW WenKai Screen\u0026#34;; */ } [data-md-color-scheme=\u0026#34;default\u0026#34;] { --md-footer-bg-color--dark: #ffffffd5; --md-footer-fg-color--light: #000000c6; --md-footer-fg-color--lighter: #0000009d; --md-footer-fg-color--lightest: #000000; } [data-md-color-scheme=\u0026#34;slate\u0026#34;] { --md-default-bg-color: #131313; /* --md-default-bg-color--light: #161616; --md-default-bg-color--lighter: #161616; --md-default-bg-color--lightest: #161616; */ --md-default-fg-color: rgba(255, 253, 253, 0.868); --md-default-fg-color--light: rgba(255, 255, 255, 0.854); --md-default-fg-color--lighter: rgba(255, 255, 255, 0.393); --md-default-fg-color--lightest: rgba(255, 255, 255, 0.58); --md-primary-fg-color: #1f1e33; --md-typeset-a-color: #ffffff; --md-footer-fg-color: #fff; --md-footer-bg-color: var(--md-default-bg-color); --md-footer-bg-color--dark: var(--md-default-bg-color); --md-footer-fg-color--light: #ffffffc3; --md-footer-fg-color--lighter: #ffffffc4; --md-code-bg-color: #1c1c1c; } .md-header__title { font-weight: bold; font-family: \u0026#34;LXGW Wenkai Screen\u0026#34;, sans-serif; } 笔者这里对日间模式和夜间模式都单独设置了一些自己喜欢的颜色，这些颜色的参数很多，具体可以看 Material for MkDocs 作者给出的示例，里面包含了所有的颜色定义。\n同时笔者也对字体进行了设置，这里设置了正文和代码的字体，这里的字体是笔者自己下载的字体，你可以根据自己的喜好更改，可以是网上的字体链接，也可以下载之后引入。\n我的字体选择 # 正文中，笔者使用非常出名的开源字体 霞鹜文楷，这是一款非常适合中文阅读的字体，同时也支持英文和数字。在网站设置中，参考了文章在站点网页中使用霞鹜文楷（LXGW WenKai），将字体 CSS 链接引入，使用的是屏幕阅读优化的版本。\n代码字体是 Maple Font，具体可以前往其官网查看，比较符合笔者的审美。\n我的配色方案 # 夹带点私货 (*´∀`)~♥\n网站的日间模式主题色（#0287ac）来源于动画《Girls Band Cry》中登场角色河原木桃香的代表色（#85c9dc），经过针对可读性的优化而得。 网站的夜间模式主题色（#1f1e33）来源于曲师 かめりあ 的 Arcaea 独占曲目《#1f1e33》。 插件的引入 # 笔者使用了两个额外的 MkDocs 插件。\n一个是 TonyCrane 学长的字数统计插件。\nTonyCrane/mkdocs-statistics-plugin A MkDocs plugin that generate statistic data of a site Python 34 7 另一个是 ignorantshr 和 timvink 开发的自动标题插件。\nignorantshr/mkdocs-add-number-plugin MkDocs plugin to automatically number the headings (h1-h6) in each markdown page and the nav. Python 19 4 插件的具体使用方式直接看仓库中的 README 即可。\n需要注意的是，在本地安装好插件就可以渲染出效果，但是在 GitHub Pages 上渲染出效果需要构建页面的工作流中让 GitHub Actions 安装这些插件，需要在 PublishMySite.yml 文件中添加：\njobs: # 工作流的具体内容 deploy: runs-on: ubuntu-latest # 创建一个新的云端虚拟机 使用最新Ubuntu系统 steps: - uses: actions/checkout@v2 # 先checkout到main分支 - uses: actions/setup-python@v2 # 再安装Python3和相关环境 with: python-version: 3.x - run: pip install mkdocs-material # 使用pip包管理工具安装mkdocs-material - run: pip install mkdocs-statistics-plugin # 安装mkdocs-statistics-plugin - run: pip install mkdocs-add-number-plugin # 安装mkdocs-add-number-plugin - run: mkdocs gh-deploy --force # 使用mkdocs-material部署gh-pages分支 即先安装好所有的插件，然后再部署网站。否则 Actions 会报错。\n此外在网站的主页自定义样式中还用到了下列插件：\n一言插件：hitokoto 网站访问量统计插件：不蒜子 ","date":"2025 年 8 月 23 日","externalUrl":null,"permalink":"/posts/mkdocs-advance/","section":"Posts","summary":"","title":"MkDocs 美化与进阶","type":"posts"},{"content":"","date":"2025 年 8 月 23 日","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2025 年 8 月 23 日","externalUrl":null,"permalink":"/tags/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/","section":"Tags","summary":"","title":"网站设计","type":"tags"},{"content":"","date":"2025 年 8 月 22 日","externalUrl":null,"permalink":"/tags/github-pages/","section":"Tags","summary":"","title":"GitHub Pages","type":"tags"},{"content":" 本文核心内容在笔者的笔记本网站中亦有记载，此页面为整理重制版。 跳转至原文 笔者在大一暑假（2023 年）接触到诸多学长的网页笔记本，逐渐对这种结构化、共享化记录自己的知识体系的方式产生兴趣。经过一段时间的探索与实践，笔者决定使用 MkDocs 与 GitHub Pages 这一工具来搭建自己的网页笔记本。一番折腾过后该网站于 2025 年春逐渐成形，本文即将网站的完整创建流程进行整理与分享。\n与网上其他大部分教程不同的是，本文不会花非常大的篇幅来描述 MkDocs 站点的详细配置，而是侧重于小白在搭建 MkDocs 站点时可能会遇到的问题和解决方法。 由于本站并不是所有人眼中的最佳形态（包括笔者自己），所以请各位有更好的建议请不吝赐教，笔者将不胜感激。\n网页成果展示 # 跳转至网站 Previous Next 总体构建思路 # 为了搭建我们的笔记本，我们需要哪些东西？\n把我们的文档从 Markdown 格式转为网页格式的工具，让网站能被自己看见； 把这个静态网站部署到互联网上的工具，让网站能被别人看见。 网站生成 # 对于第一个工具，笔者的选择是 MkDocs + Material for MkDocs。MkDocs 是一个基于 Python 的静态网站生成器，详情见 MkDocs 官网。\n实际上，生成静态网站的工具远不止 MkDocs 一家，还有诸如 mdBook、Hugo 等等，本文以 MkDocs 为例，对整套流程熟悉之后，再尝试其他工具也会更加容易。\n至于为什么选择 MkDocs？ 笔者认为作为一个笔记本来说，最重要的是排版简洁和清晰，并且易于维护。在实操之后，读者会发现 MkDocs 的上手非常容易，而且对于新文档的添加与网站的维护非常简单和便捷。同时笔者认为笔记本不应该具有太多的花哨的效果，而是应该更加注重内容本身。\n你也许会发现 MkDocs 官网的样式似乎有些简陋，与本站不同。因为本站还用了最著名的 MkDocs 主题 Material for MkDocs，详情见 Material for MkDocs 官网。本教程的大多数内容也是参考这个主题的文档，请读者务必以 Material for MkDocs 的文档为准。\n网站部署 # 对于第二个工具，我们需要一个“服务器”，来将我们的网站内容展示给用户。笔者选择了使用 GitHub 来托管网站源文件，并使用 GitHub Pages 来部署网站。\nGitHub 的作用不必多说，作为全球最大的代码托管平台，它提供了免费的静态网站托管服务 GitHub Pages。详情见 GitHub Pages 官网。\n实际上，GitHub Pages 并不是唯一的选择，还有诸如 GitLab Pages、Vercel、Netlify 等等，这些服务都提供了免费的静态网站托管服务，甚至这些服务在速度上可能还会更快。本教程选择 GitHub Pages 的原因是足够简单，因为网站代码本身就托管在 GitHub 上，所以直接使用 GitHub Pages 部署更加方便。\n这是一个非常简单且零成本的部署方式，只需要一个 GitHub 账号，就可以免费部署一个甚至多个静态网站，还可以绑定自己的域名（如本站）。\n准备工作 # 基础知识 # 你需要有：\n一定的 Markdown 语法基础； 一定的命令行操作能力； 一定的 Git 使用经验； 针对想 DIY 主题的用户，需要一些 HTML、CSS、JavaScript 基础知识； 笔者正在使用 MacBook，所以相关操作除非特殊声明，否则都是基于 macOS 系统的。Linux/Windows 用户请自行替换相应命令（实际上主要是命令行操作的小差异，其他内容基本一致）。\n对于本教程每一步涉及到的操作和命令，请读者先理解为什么这样做再执行，不要盲目复制粘贴。 在后续的文章中，“本站”一般指的是笔者的 MkDocs 网站。\n环境准备 # Git 环境 # macOS 和 Linux 应该是自带的，Windows 用户可以从 Git 官网下载安装包安装，网上有很多教程，这里不再赘述。\nWindows 用户安装 Git 时，可以选择安装 Git Bash，安装好之后可以使用 Git Bash 来执行命令，这里面可以用一些常用的 Linux 命令，比如 ls、cd 等等（当然现在的 Terminal 也支持了）。 安装好后，记得设置好用户名和邮箱：\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;xxxxxx@xxxxx.com\u0026#34; Python 环境 # 对于 Linux/macOS 用户，可以选择自己习惯的包管理器安装 Python，如：\nbrew install python 对于 Windows 用户，可以直接从 Python 官网 下载安装包，安装时务必勾选“Add Python to PATH”。相关的教程在网上非常多，自行搜索即可，最终效果是在终端中输入 python --version 和 pip --version 后能够看到版本号即可。\n更推荐的做法是采用 Python 环境管理工具进行单独的 Python 环境配置，例如笔者使用的就是 Miniconda，这样可以避免不同项目之间的依赖冲突。 MkDocs 环境 # 直接安装 Material for MkDocs 即可，它会自动安装 MkDocs：\npip install mkdocs-material 除了 pip 之外，还可以通过 docker 和 git 安装，详情见 Material for MkDocs 官网，这里不再赘述。\n最终安装的效果是在终端中输入 mkdocs --version 后能够看到版本号即可。\n初始化并运行 MkDocs 项目 # 终端进入到你想要存放 MkDocs 项目的目录，然后执行：\nmkdocs new site 其中 site 是项目的名称，可以自定义，这个命令会在当前目录下创建一个名为 site 的文件夹。进入 site 文件夹，里面包含 MkDocs 项目的基本结构：\n. ├── docs │ └── index.md └── mkdocs.yml docs 文件夹是存放 Markdown 文件的地方，mkdocs.yml 是 MkDocs 的配置文件，这两个文件是 MkDocs 项目的基础。\n在此目录下输入：\nmkdocs serve 你可以看到命令行输出：\n❯ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.03 seconds INFO - [11:09:37] Watching paths for changes: \u0026#39;docs\u0026#39;, \u0026#39;mkdocs.yml\u0026#39; INFO - [11:09:37] Serving on http://127.0.0.1:8000/ 这时前往链接 http://127.0.0.1:8000/，你会看到一个简单的页面，这就是 MkDocs 生成的网站。\n这个页面是 MkDocs 自动生成的首页，内容是 docs/index.md 文件中的内容。你可以在这个文件中写入 Markdown 语法的内容，然后刷新页面，就能看到内容的变化。\n按下 Ctrl + C 终止 mkdocs serve 命令。\n网站内容和样式设置 # 你可能会奇怪，为什么这个页面看起来和本站不一样？这是因为本站使用了 Material for MkDocs 主题。\n同时，本站的文章内容也不是直接写在 docs/index.md 文件中的，而是在 docs 文件夹下的其他 Markdown 文件中的。这些文件会被 MkDocs 自动识别并生成对应的页面。\n以上这些内容和样式的设置大多都集中在 mkdocs.yml 文件中，这个文件是 MkDocs 的配置文件，你可以在其中设置网站的标题、主题、导航栏等等。\n下面给出一个简单的 mkdocs.yml 文件示例（也参考了其他人的代码）：\n# [Info] site_name: Fanovian\u0026#39;s Notebook site_url: https://note.fanovian.cc/ site_description: Fanovian 的笔记本 # [UI] ## [top] theme: name: material custom_dir: overrides favicon: https://s2.loli.net/2025/01/27/oFMcIOLbZstxUjH.png font: text: LXGW WenKai Screen code: Maple Mono palette: # Palette toggle for automatic mode - media: \u0026#34;(prefers-color-scheme)\u0026#34; toggle: icon: material/auto-fix name: 切换至日间模式 # Palette toggle for light mode - media: \u0026#34;(prefers-color-scheme: light)\u0026#34; scheme: default primary: var(--md-primary-fg-color) toggle: icon: material/toggle-switch name: 切换至夜间模式 # Palette toggle for dark mode - media: \u0026#34;(prefers-color-scheme: dark)\u0026#34; scheme: slate primary: var(--md-primary-fg-color) toggle: icon: material/toggle-switch-off-outline name: 切换至跟随系统模式 features: - announce.dismiss - navigation.tracking #地址栏中的 URL 将自动更新为在目录中突出显示的活动锚点 - navigation.tabs # 使用Tab来进行分类 - navigation.top # 返回顶部的按钮 在上滑时出现 - navigation.indexes # Tab会有一个index.md 而不是在打开Tab时打开第一篇文章 # - navigation.footer # 底部的翻页 # - navigation.expand # 打开Tab时左侧目录全部展开 # - toc.follow - search.share #搜索分享按钮 - search.suggest # 搜索输入一些字母时推荐补全整个单词 - search.highlight # 搜索出的文章关键词加入高亮 - content.code.copy # 可以通过按钮复制代码 - content.action.edit # 点击按钮跳转到编辑页面 需要结合 edit_uri 一起使用 language: zh # 一些提示性的文字会变成中文 icon: repo: fontawesome/brands/github logo: material/notebook edit_uri: edit/main/docs # 编辑按钮跳转的链接 ## [top-right corner] repo_url: https://github.com/Fanovian/notebook # 右上角的GitHub链接 repo_name: Fanovian\u0026#39;s Notebook # 鼠标悬浮提示 ## [bottom-left corner] copyright: Copyright \u0026amp;copy; 2023 - 2025 Fanovian ## [bottom-right corner] extra: social: # icons - icon: fontawesome/solid/blog link: https://blog.fanovian.cc/ name: Blog | Fanovian # [Extensions] plugins: - search: separator: \u0026#39;[\\s\\u200b\\-]\u0026#39; lang: - en - ja - tags # 给单篇文章添加标签 https://squidfunk.github.io/mkdocs-material/setup/setting-up-tags/?h=tags markdown_extensions: # - abbr - meta - def_list - attr_list # - admonition # - footnotes - md_in_html - sane_lists - admonition - pymdownx.keys - pymdownx.mark - pymdownx.tilde # - pymdownx.caret - pymdownx.critic # - pymdownx.betterem - pymdownx.details - pymdownx.snippets - pymdownx.magiclink - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.inlinehilite # - markdown.extensions.attr_list - toc: permalink: true slugify: !!python/object/apply:pymdownx.slugs.slugify kwds: case: lower toc_depth: 4 # 将深度从 4 改为 2 - pymdownx.superfences: custom_fences: - name: mermaid class: mermaid format: !!python/name:pymdownx.superfences.fence_code_format - pymdownx.highlight: # 代码块高亮 anchor_linenums: true # linenums: true # 显示行号 # auto_title: true # 显示编程语言名称 linenums_style: pymdownx-inline line_spans: __span pygments_lang_class: true - pymdownx.emoji: emoji_index: !!python/name:material.extensions.emoji.twemoji emoji_generator: !!python/name:material.extensions.emoji.to_svg - pymdownx.tabbed: alternate_style: true - pymdownx.tasklist: custom_checkbox: true - pymdownx.arithmatex: generic: true extra_javascript: - https://polyfill.io/v3/polyfill.min.js?features=es6 - javascripts/mathjax.js - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js extra_css: - stylesheets/extra.css - https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css # font-awesome表情支持 # [Navigation] nav: - 主页: index.md - 课程: - course/index.md - 程序设计与算法基础: course/fpa/final-exam-re.md - 数据结构基础: - course/fds/index.md - 算法分析基础: course/fds/ch1.md nav、extra_css、extra_javascript 等地方引入文件的根目录是 docs 文件夹，所以你需要在 docs 文件夹下创建对应的文件夹，然后把文件放进去。\n正如本文简介所言，文章不会大篇幅介绍这个配置的详细内容，因为 Material for MkDocs 的文档已经写得非常详细了，你可以在 Material for MkDocs 官网 找到每一个字段的详细解释，也可以自己修改配置文件，然后刷新页面看效果。笔者认为新手的主要任务是先把网站跑起来，然后再慢慢调整样式。 除了动态预览，还可以终端输入：\nmkdocs build 这个命令会在当前目录下生成一个 site 文件夹，里面包含了生成的静态网站文件，这个文件夹就是你需要部署到服务器上的文件夹。\n部署网站 # 准备 GitHub 仓库 # 首先要有一个 GitHub 账号，没有的自行搜索注册。\n接着需要创建一个空仓库：\n如果你打算只用一个仓库来存放网站源文件（也就是只有一个网站），那么仓库名应该是 username.github.io，其中 username 是你的 GitHub 用户名，这样就可以通过 https://username.github.io 来访问你的网站； 如果你打算有多个网站（比如笔者，一个是笔记本一个是博客），那么仓库名可以随意，但是需要在仓库的 Settings -\u0026gt; Pages 中进行一些设置，详情可以参考这篇文章：如何拥有多个GitHub Pages。这样设置后，需要通过 https://username.github.io/repo-name 来访问你的网站。 注册完之后，需要进行设置，让一会儿的 GitHub Actions 拥有权限来操作这个仓库。在 GitHub 仓库的 Settings -\u0026gt; Actions -\u0026gt; General 中的最下方 “Workflow permissions” 选项修改为 “Read and write permissions” 并保存。\nGit 环境设置 # 终端先进入网站根目录，然后执行：\ngit init git branch -M main git remote add origin https://github.com/username/repo-name.git 让 Git 管理这个文件夹，并且将默认分支改为 main，然后将这个文件夹与 GitHub 仓库关联。\n自动部署命令 # 我们每次有新内容 push 到 GitHub 仓库后，都需要手动执行 mkdocs gh-deploy 命令来部署网站，这样显然不够方便。为此我们利用 GitHub Actions 来实现自动部署。\n创建目录和文件 .github/workflows/PublishMySite.yml，内容如下：\nname: publish site on: # 工作流的触发条件 push: # 一种是本地 push 的时候 branches: - main # 只有在 main 分支 push 时才触发 pull_request: # 另一种是 PR 合并时 branches: - main jobs: # 工作流的具体内容 deploy: runs-on: ubuntu-latest # 创建一个新的云端虚拟机 使用最新 Ubuntu 系统 steps: - uses: actions/checkout@v2 # 先 checkout 到 main 分支 - uses: actions/setup-python@v2 # 再安装 Python3 和相关环境 with: python-version: 3.x - run: pip install mkdocs-material # 使用 pip 包管理工具安装 mkdocs-material - run: mkdocs gh-deploy --force # 使用 mkdocs-material 部署 gh-pages 分支 这个脚本文件实际上就是在操作“服务器”进行自动部署，当我们 push 代码到 GitHub 仓库的 main 分支时，GitHub Actions 会自动执行这个脚本，将网站部署到 GitHub Pages 上。\n编辑好之后，网站的文件结构应该是这样的：\n. ├── .github │ └── workflows │ └── PublishMySite.yml ├── docs │ └── index.md └── mkdocs.yml 其中 docs 文件夹里面是你自己的 Markdown 文件，也许不止一个。\n提交并推送 # 当做完你的网站内容时，执行：\ngit add . # 添加所有文件到暂存区 git commit -m \u0026#34;Initial commit\u0026#34; # 提交到本地仓库，引号内是提交信息 git push -u origin main # 推送到远程仓库 push 完之后，可以进入 GitHub 仓库的 Actions 版块查看部署进度。如果发生错误，可以在 Actions 的日志中查看详细信息，你的邮箱也会收到错误信息。\n大功告成 # 一切正常的话，你的网站应该已经部署到了 GitHub Pages 上，可以通过 https://username.github.io 或者 https://username.github.io/repo-name 来访问你的网站了。\n","date":"2025 年 8 月 22 日","externalUrl":null,"permalink":"/posts/mkdocs-basic/","section":"Posts","summary":"","title":"MkDocs 网页构建入门","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":" 时间线 # 更改域名 2025-8-27 经过域名购买与解析，网站成功更改为新域名：blog.flyburg.cc 网站创立 2025-8-23 经过一番努力，网站终于上线了！🎉\n采用 Hugo + Blowfish 主题进行搭建，利用 GitHub Action 实现了 CI/CD 自动部署，支持了文章发表、标签分类与评论功能。 Flyburg/blog-public HTML 0 0 ","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"关于","type":"page"},{"content":" 永恒闪电 大千世界，万物永恒\n如何加入 # 在本页面下方或其他方式（如邮件）给我留言，提供以下信息：\n网站名称 网站链接 网站头像链接 网站简介 添加成功后，我会通过原方式回复您～\n","externalUrl":null,"permalink":"/friends/","section":"","summary":"","title":"朋友们","type":"page"}]